{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Starbucks Capstone Challenge\n",
    "\n",
    "### Introduction\n",
    "\n",
    "This data set contains simulated data that mimics customer behavior on the Starbucks rewards mobile app. Once every few days, Starbucks sends out an offer to users of the mobile app. An offer can be merely an advertisement for a drink or an actual offer such as a discount or BOGO (buy one get one free). Some users might not receive any offer during certain weeks. \n",
    "\n",
    "Not all users receive the same offer, and that is the challenge to solve with this data set.\n",
    "\n",
    "Your task is to combine transaction, demographic and offer data to determine which demographic groups respond best to which offer type. This data set is a simplified version of the real Starbucks app because the underlying simulator only has one product whereas Starbucks actually sells dozens of products.\n",
    "\n",
    "Every offer has a validity period before the offer expires. As an example, a BOGO offer might be valid for only 5 days. You'll see in the data set that informational offers have a validity period even though these ads are merely providing information about a product; for example, if an informational offer has 7 days of validity, you can assume the customer is feeling the influence of the offer for 7 days after receiving the advertisement.\n",
    "\n",
    "You'll be given transactional data showing user purchases made on the app including the timestamp of purchase and the amount of money spent on a purchase. This transactional data also has a record for each offer that a user receives as well as a record for when a user actually views the offer. There are also records for when a user completes an offer. \n",
    "\n",
    "Keep in mind as well that someone using the app might make a purchase through the app without having received an offer or seen an offer.\n",
    "\n",
    "### Example\n",
    "\n",
    "To give an example, a user could receive a discount offer buy 10 dollars get 2 off on Monday. The offer is valid for 10 days from receipt. If the customer accumulates at least 10 dollars in purchases during the validity period, the customer completes the offer.\n",
    "\n",
    "However, there are a few things to watch out for in this data set. Customers do not opt into the offers that they receive; in other words, a user can receive an offer, never actually view the offer, and still complete the offer. For example, a user might receive the \"buy 10 dollars get 2 dollars off offer\", but the user never opens the offer during the 10 day validity period. The customer spends 15 dollars during those ten days. There will be an offer completion record in the data set; however, the customer was not influenced by the offer because the customer never viewed the offer.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Sets\n",
    "\n",
    "The data is contained in three files:\n",
    "\n",
    "* portfolio.json - containing offer ids and meta data about each offer (duration, type, etc.)\n",
    "* profile.json - demographic data for each customer\n",
    "* transcript.json - records for transactions, offers received, offers viewed, and offers completed\n",
    "\n",
    "Here is the schema and explanation of each variable in the files:\n",
    "\n",
    "**portfolio.json**\n",
    "* id (string) - offer id\n",
    "* offer_type (string) - type of offer ie BOGO, discount, informational\n",
    "* difficulty (int) - minimum required spend to complete an offer\n",
    "* reward (int) - reward given for completing an offer\n",
    "* duration (int) - time for offer to be open, in days\n",
    "* channels (list of strings)\n",
    "\n",
    "**profile.json**\n",
    "* age (int) - age of the customer \n",
    "* became_member_on (int) - date when customer created an app account\n",
    "* gender (str) - gender of the customer (note some entries contain 'O' for other rather than M or F)\n",
    "* id (str) - customer id\n",
    "* income (float) - customer's income\n",
    "\n",
    "**transcript.json**\n",
    "* event (str) - record description (ie transaction, offer received, offer viewed, etc.)\n",
    "* person (str) - customer id\n",
    "* time (int) - time in hours since start of test. The data begins at time t=0\n",
    "* value - (dict of strings) - either an offer id or transaction amount depending on the record\n",
    "\n",
    "**The problem**\n",
    "\n",
    "That I chose to solve was to build a model that predicts whether a customer will respond to an offer. My strategy for solving this problem has two steps. First, I will combine the offer portfolio, customer profile, and transaction data. Each row of this combined dataset will describe an offer's attributes, customer demographic data, and whether the offer was successful. Second, I will use  the LinearRegression model. This provides me with a baseline for evaluating the performance of models that I construct. Accuracy measures how well a model correctly predicts whether an offer is successful.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# library\n",
    "import re\n",
    "import math\n",
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.metrics import fbeta_score, make_scorer\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "% matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import data\n",
    "portfolio = pd.read_json('data/portfolio.json', orient='records', lines=True)\n",
    "profile = pd.read_json('data/profile.json', orient='records', lines=True)\n",
    "transcript = pd.read_json('data/transcript.json', orient='records', lines=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  Portfolio Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>channels</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration</th>\n",
       "      <th>id</th>\n",
       "      <th>offer_type</th>\n",
       "      <th>reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[email, mobile, social]</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>bogo</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[web, email, mobile, social]</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>bogo</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[web, email, mobile]</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>informational</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[web, email, mobile]</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>bogo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[web, email]</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>discount</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       channels  difficulty  duration  \\\n",
       "0       [email, mobile, social]          10         7   \n",
       "1  [web, email, mobile, social]          10         5   \n",
       "2          [web, email, mobile]           0         4   \n",
       "3          [web, email, mobile]           5         7   \n",
       "4                  [web, email]          20        10   \n",
       "\n",
       "                                 id     offer_type  reward  \n",
       "0  ae264e3637204a6fb9bb56bc8210ddfd           bogo      10  \n",
       "1  4d5c57ea9a6940dd891ad53e9dbe8da0           bogo      10  \n",
       "2  3f207df678b143eea3cee63160fa8bed  informational       0  \n",
       "3  9b98b8c7a33c4b65b9aebfe6a799e6d9           bogo       5  \n",
       "4  0b1e1539f2cc45b7b9fa7c272da2e1d7       discount       5  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check portfolio data\n",
    "portfolio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['channels', 'difficulty', 'duration', 'id', 'offer_type', 'reward'], dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check columns in portfolio \n",
    "portfolio.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10 entries, 0 to 9\n",
      "Data columns (total 6 columns):\n",
      "channels      10 non-null object\n",
      "difficulty    10 non-null int64\n",
      "duration      10 non-null int64\n",
      "id            10 non-null object\n",
      "offer_type    10 non-null object\n",
      "reward        10 non-null int64\n",
      "dtypes: int64(3), object(3)\n",
      "memory usage: 560.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "#Check portfolio info \n",
    "portfolio.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 6)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the shape of dateset\n",
    "portfolio.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10,  0,  5, 20,  7])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the unique for difficulty\n",
    "portfolio.difficulty.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7,  5,  4, 10,  3])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the unique for duration\n",
    "portfolio.duration.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10,  0,  5,  3,  2])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the unique for reward\n",
    "portfolio.reward.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bogo', 'informational', 'discount'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the unique for offer_type\n",
    "portfolio.offer_type.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the number of offer by offer type\n",
    "offer_type_count=portfolio.groupby('offer_type').id.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe8735ea3c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#offer Type Distribution\n",
    "offer_type_count.plot.pie(figsize=(8, 8), fontsize = 20, autopct = '%.2f', title = 'offer Type Distribution');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have three types of offers , BOGO and discount used more than informational "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration</th>\n",
       "      <th>reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.700000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>4.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.831905</td>\n",
       "      <td>2.321398</td>\n",
       "      <td>3.583915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       difficulty   duration     reward\n",
       "count   10.000000  10.000000  10.000000\n",
       "mean     7.700000   6.500000   4.200000\n",
       "std      5.831905   2.321398   3.583915\n",
       "min      0.000000   3.000000   0.000000\n",
       "25%      5.000000   5.000000   2.000000\n",
       "50%      8.500000   7.000000   4.000000\n",
       "75%     10.000000   7.000000   5.000000\n",
       "max     20.000000  10.000000  10.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clean Portfolio Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>channels</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration</th>\n",
       "      <th>id</th>\n",
       "      <th>offer_type</th>\n",
       "      <th>reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[email, mobile, social]</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>bogo</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[web, email, mobile, social]</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>bogo</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[web, email, mobile]</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>informational</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[web, email, mobile]</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>bogo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[web, email]</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>discount</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       channels  difficulty  duration  \\\n",
       "0       [email, mobile, social]          10         7   \n",
       "1  [web, email, mobile, social]          10         5   \n",
       "2          [web, email, mobile]           0         4   \n",
       "3          [web, email, mobile]           5         7   \n",
       "4                  [web, email]          20        10   \n",
       "\n",
       "                                 id     offer_type  reward  \n",
       "0  ae264e3637204a6fb9bb56bc8210ddfd           bogo      10  \n",
       "1  4d5c57ea9a6940dd891ad53e9dbe8da0           bogo      10  \n",
       "2  3f207df678b143eea3cee63160fa8bed  informational       0  \n",
       "3  9b98b8c7a33c4b65b9aebfe6a799e6d9           bogo       5  \n",
       "4  0b1e1539f2cc45b7b9fa7c272da2e1d7       discount       5  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check portfolio data\n",
    "portfolio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "channels      0\n",
       "difficulty    0\n",
       "duration      0\n",
       "id            0\n",
       "offer_type    0\n",
       "reward        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# null in dataset\n",
    "portfolio.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change duration to hour\n",
    "portfolio.duration = portfolio.duration*24"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename id to offer_id.\n",
    "portfolio.rename(columns={'id': 'offer_id'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>channels</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>offer_type</th>\n",
       "      <th>reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[email, mobile, social]</td>\n",
       "      <td>10</td>\n",
       "      <td>168</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>bogo</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[web, email, mobile, social]</td>\n",
       "      <td>10</td>\n",
       "      <td>120</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>bogo</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[web, email, mobile]</td>\n",
       "      <td>0</td>\n",
       "      <td>96</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>informational</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[web, email, mobile]</td>\n",
       "      <td>5</td>\n",
       "      <td>168</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>bogo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[web, email]</td>\n",
       "      <td>20</td>\n",
       "      <td>240</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>discount</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       channels  difficulty  duration  \\\n",
       "0       [email, mobile, social]          10       168   \n",
       "1  [web, email, mobile, social]          10       120   \n",
       "2          [web, email, mobile]           0        96   \n",
       "3          [web, email, mobile]           5       168   \n",
       "4                  [web, email]          20       240   \n",
       "\n",
       "                           offer_id     offer_type  reward  \n",
       "0  ae264e3637204a6fb9bb56bc8210ddfd           bogo      10  \n",
       "1  4d5c57ea9a6940dd891ad53e9dbe8da0           bogo      10  \n",
       "2  3f207df678b143eea3cee63160fa8bed  informational       0  \n",
       "3  9b98b8c7a33c4b65b9aebfe6a799e6d9           bogo       5  \n",
       "4  0b1e1539f2cc45b7b9fa7c272da2e1d7       discount       5  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check portfolio data\n",
    "portfolio.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  Profile Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>became_member_on</th>\n",
       "      <th>gender</th>\n",
       "      <th>id</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>118</td>\n",
       "      <td>20170212</td>\n",
       "      <td>None</td>\n",
       "      <td>68be06ca386d4c31939f3a4f0e3dd783</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55</td>\n",
       "      <td>20170715</td>\n",
       "      <td>F</td>\n",
       "      <td>0610b486422d4921ae7d2bf64640c50b</td>\n",
       "      <td>112000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>118</td>\n",
       "      <td>20180712</td>\n",
       "      <td>None</td>\n",
       "      <td>38fe809add3b4fcf9315a9694bb96ff5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75</td>\n",
       "      <td>20170509</td>\n",
       "      <td>F</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118</td>\n",
       "      <td>20170804</td>\n",
       "      <td>None</td>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  became_member_on gender                                id    income\n",
       "0  118          20170212   None  68be06ca386d4c31939f3a4f0e3dd783       NaN\n",
       "1   55          20170715      F  0610b486422d4921ae7d2bf64640c50b  112000.0\n",
       "2  118          20180712   None  38fe809add3b4fcf9315a9694bb96ff5       NaN\n",
       "3   75          20170509      F  78afa995795e4d85b5d9ceeca43f5fef  100000.0\n",
       "4  118          20170804   None  a03223e636434f42ac4c3df47e8bac43       NaN"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check profile data\n",
    "profile.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 17000 entries, 0 to 16999\n",
      "Data columns (total 5 columns):\n",
      "age                 17000 non-null int64\n",
      "became_member_on    17000 non-null int64\n",
      "gender              14825 non-null object\n",
      "id                  17000 non-null object\n",
      "income              14825 non-null float64\n",
      "dtypes: float64(1), int64(2), object(2)\n",
      "memory usage: 664.1+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check portfolio info \n",
    "profile.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'became_member_on', 'gender', 'id', 'income'], dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check columns in profile \n",
    "profile.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(17000, 5)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the shape of dateset\n",
    "profile.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([118,  55,  75,  68,  65,  58,  61,  26,  62,  49,  57,  40,  64,\n",
       "        78,  42,  56,  33,  46,  59,  67,  53,  22,  96,  69,  20,  45,\n",
       "        54,  39,  41,  79,  66,  29,  44,  63,  36,  76,  77,  30,  51,\n",
       "        27,  73,  74,  70,  89,  50,  90,  60,  19,  72,  52,  18,  71,\n",
       "        83,  43,  47,  32,  38,  34,  85,  48,  35,  82,  21,  24,  81,\n",
       "        25,  37,  23, 100,  28,  84,  80,  87,  86,  94,  31,  88,  95,\n",
       "        93,  91,  92,  98, 101,  97,  99])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the unique for age\n",
    "profile.age.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the avg for age\n",
    "avg_age=profile.age.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "62.531411764705879"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the avg for income\n",
    "avg_income=profile.income.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65404.991568296799"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# No of users\n",
    "users=profile.id.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17000"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>became_member_on</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>17000.000000</td>\n",
       "      <td>1.700000e+04</td>\n",
       "      <td>14825.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>62.531412</td>\n",
       "      <td>2.016703e+07</td>\n",
       "      <td>65404.991568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>26.738580</td>\n",
       "      <td>1.167750e+04</td>\n",
       "      <td>21598.299410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>2.013073e+07</td>\n",
       "      <td>30000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>2.016053e+07</td>\n",
       "      <td>49000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>58.000000</td>\n",
       "      <td>2.017080e+07</td>\n",
       "      <td>64000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>73.000000</td>\n",
       "      <td>2.017123e+07</td>\n",
       "      <td>80000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>118.000000</td>\n",
       "      <td>2.018073e+07</td>\n",
       "      <td>120000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age  became_member_on         income\n",
       "count  17000.000000      1.700000e+04   14825.000000\n",
       "mean      62.531412      2.016703e+07   65404.991568\n",
       "std       26.738580      1.167750e+04   21598.299410\n",
       "min       18.000000      2.013073e+07   30000.000000\n",
       "25%       45.000000      2.016053e+07   49000.000000\n",
       "50%       58.000000      2.017080e+07   64000.000000\n",
       "75%       73.000000      2.017123e+07   80000.000000\n",
       "max      118.000000      2.018073e+07  120000.000000"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "profile.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count gender value\n",
    "gender_count=profile.gender.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe87347f0b8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gender_count.plot.bar(color = 'black', figsize =(10,5), title = 'gender Type distribtion')\n",
    "plt.xlabel('gender type');\n",
    "plt.ylabel('Number of customer');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the male customer more than female and other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe873473cf8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# age distribution\n",
    "profile.age.hist();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 118 unnormal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe8734cd3c8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check the Average age for different gender\n",
    "age_gender = profile.groupby('gender')['age'].mean().sort_values(ascending = False)\n",
    "\n",
    "# Plot the Average age for different gender\n",
    "plt.figure(figsize=[22,6]);\n",
    "plt.bar(age_gender.index, age_gender);\n",
    "plt.xlabel('gender');\n",
    "plt.ylabel('Avg.age');\n",
    "plt.title('Average age for different gender');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Mean age in F customers are older than M and O customers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe873498f28>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check the Average income for different gender\n",
    "income_gender = profile.groupby('gender')['income'].mean().sort_values(ascending = False)\n",
    "\n",
    "# Plot the Average income for different gender\n",
    "plt.figure(figsize=[22,6]);\n",
    "plt.bar(age_gender.index, income_gender);\n",
    "plt.xlabel('gender');\n",
    "plt.ylabel('Avg.income');\n",
    "plt.title('Average income for different gender');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Mean income in F customers are more than M and O customers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clean Profile Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove null income data\n",
    "profile = profile[profile['income'].notnull()]\n",
    "\n",
    "# Change the name of the id to user_id\n",
    "profile.rename(columns={'id': 'user_id'}, inplace=True)\n",
    "    \n",
    "# Date format for became_member_on.\n",
    "profile.became_member_on = profile['became_member_on'].astype(str).astype('datetime64[ns]', format = \"%Y%m%d\")\n",
    "    \n",
    "profile.dropna(subset=['gender', 'income'], inplace = True)\n",
    "profile.drop(profile[profile.age == 118].index, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add start_year , start_month , start_day columns\n",
    "profile['start_year'] = profile.became_member_on.dt.year\n",
    "profile[\"start_month\"] = profile.became_member_on.dt.month\n",
    "profile[\"start_day\"] = profile.became_member_on.dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change gender to 0 and 1 to use it in the model \n",
    "profile['gender'] = profile['gender'].apply(lambda x: 1 if x == 'M' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>became_member_on</th>\n",
       "      <th>gender</th>\n",
       "      <th>user_id</th>\n",
       "      <th>income</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55</td>\n",
       "      <td>2017-07-15</td>\n",
       "      <td>0</td>\n",
       "      <td>0610b486422d4921ae7d2bf64640c50b</td>\n",
       "      <td>112000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75</td>\n",
       "      <td>2017-05-09</td>\n",
       "      <td>0</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>68</td>\n",
       "      <td>2018-04-26</td>\n",
       "      <td>1</td>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>65</td>\n",
       "      <td>2018-02-09</td>\n",
       "      <td>1</td>\n",
       "      <td>389bc3fa690240e798340f5a15918d5c</td>\n",
       "      <td>53000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>58</td>\n",
       "      <td>2017-11-11</td>\n",
       "      <td>1</td>\n",
       "      <td>2eeac8d8feae4a8cad5a6af0499a211d</td>\n",
       "      <td>51000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age became_member_on  gender                           user_id    income  \\\n",
       "1    55       2017-07-15       0  0610b486422d4921ae7d2bf64640c50b  112000.0   \n",
       "3    75       2017-05-09       0  78afa995795e4d85b5d9ceeca43f5fef  100000.0   \n",
       "5    68       2018-04-26       1  e2127556f4f64592b11af22de27a7932   70000.0   \n",
       "8    65       2018-02-09       1  389bc3fa690240e798340f5a15918d5c   53000.0   \n",
       "12   58       2017-11-11       1  2eeac8d8feae4a8cad5a6af0499a211d   51000.0   \n",
       "\n",
       "    start_year  start_month  start_day  \n",
       "1         2017            7         15  \n",
       "3         2017            5          9  \n",
       "5         2018            4         26  \n",
       "8         2018            2          9  \n",
       "12        2017           11         11  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "profile.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                 0\n",
       "became_member_on    0\n",
       "gender              0\n",
       "user_id             0\n",
       "income              0\n",
       "start_year          0\n",
       "start_month         0\n",
       "start_day           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null value\n",
    "profile.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe873408518>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# start year and #customers\n",
    "plt.figure(figsize=(14.70, 8.27)) \n",
    "sns.countplot(data= profile, x= 'start_year')\n",
    "plt.xlabel('Month',fontsize= 15)\n",
    "plt.ylabel('Count',fontsize= 15);\n",
    "plt.xticks(rotation=45); "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most customers joined the Starbucks in 2017."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Transcript dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>person</th>\n",
       "      <th>time</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>offer received</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>0</td>\n",
       "      <td>{'offer id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>offer received</td>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>0</td>\n",
       "      <td>{'offer id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>offer received</td>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>0</td>\n",
       "      <td>{'offer id': '2906b810c7d4411798c6938adc9daaa5'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>offer received</td>\n",
       "      <td>8ec6ce2a7e7949b1bf142def7d0e0586</td>\n",
       "      <td>0</td>\n",
       "      <td>{'offer id': 'fafdcd668e3743c1bb461111dcafc2a4'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>offer received</td>\n",
       "      <td>68617ca6246f4fbc85e91a2a49552598</td>\n",
       "      <td>0</td>\n",
       "      <td>{'offer id': '4d5c57ea9a6940dd891ad53e9dbe8da0'}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            event                            person  time  \\\n",
       "0  offer received  78afa995795e4d85b5d9ceeca43f5fef     0   \n",
       "1  offer received  a03223e636434f42ac4c3df47e8bac43     0   \n",
       "2  offer received  e2127556f4f64592b11af22de27a7932     0   \n",
       "3  offer received  8ec6ce2a7e7949b1bf142def7d0e0586     0   \n",
       "4  offer received  68617ca6246f4fbc85e91a2a49552598     0   \n",
       "\n",
       "                                              value  \n",
       "0  {'offer id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}  \n",
       "1  {'offer id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}  \n",
       "2  {'offer id': '2906b810c7d4411798c6938adc9daaa5'}  \n",
       "3  {'offer id': 'fafdcd668e3743c1bb461111dcafc2a4'}  \n",
       "4  {'offer id': '4d5c57ea9a6940dd891ad53e9dbe8da0'}  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check transcript data\n",
    "transcript.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 306534 entries, 0 to 306533\n",
      "Data columns (total 4 columns):\n",
      "event     306534 non-null object\n",
      "person    306534 non-null object\n",
      "time      306534 non-null int64\n",
      "value     306534 non-null object\n",
      "dtypes: int64(1), object(3)\n",
      "memory usage: 9.4+ MB\n"
     ]
    }
   ],
   "source": [
    "#Check transcript info \n",
    "transcript.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['event', 'person', 'time', 'value'], dtype='object')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check columns in transcript \n",
    "transcript.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(306534, 4)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the shape of transcript\n",
    "transcript.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>306534.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>366.382940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>200.326314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>186.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>408.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>528.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>714.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                time\n",
       "count  306534.000000\n",
       "mean      366.382940\n",
       "std       200.326314\n",
       "min         0.000000\n",
       "25%       186.000000\n",
       "50%       408.000000\n",
       "75%       528.000000\n",
       "max       714.000000"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transcript.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['offer received', 'offer viewed', 'transaction', 'offer completed'], dtype=object)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the unique for event\n",
    "transcript.event.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event     0\n",
       "person    0\n",
       "time      0\n",
       "value     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null value\n",
    "transcript.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count event value\n",
    "event_count=transcript.event.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe87344a198>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Event type distribtion and #Customers\n",
    "event_count.plot.bar(color = 'yellow', figsize=(14.70, 8.27), title = 'event Type distribtion')\n",
    "plt.xlabel('event type');\n",
    "plt.ylabel('Number of customer');\n",
    "plt.xticks(rotation=45); "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 4 offer type customer received an offer, customer view an offer, customer perform a transaction, and customer complete an offer.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clean Transcript Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_function (transcript):\n",
    "    \n",
    "    \n",
    "    \"\"\"Create  columns for amount, reward and offer_id\n",
    "    update offer_id columm\n",
    "    update amount,reword column  \n",
    "    Change time column from hours to days\n",
    "    Rename person column name to user_id.\n",
    "    \n",
    "  \n",
    "       \n",
    "    Returns:\n",
    "    clean transcript\n",
    "    \n",
    "    \"\"\"\n",
    "\n",
    "    transcript.assign(amount='', reward='',offer_id='')\n",
    "  \n",
    " \n",
    "    for ndx, row in transcript.iterrows():\n",
    "        for o in row['value']:\n",
    "            if o == 'offer_id' or o == 'offer id':\n",
    "                transcript.at[ndx, 'offer_id']= row['value'][o]\n",
    "            if o == 'amount':\n",
    "                transcript.at[ndx, 'amount']= row['value'][o]\n",
    "            if o == 'reward':\n",
    "                transcript.at[ndx, 'reward']= row['value'][o]\n",
    "\n",
    "                  \n",
    "   \n",
    "    transcript['time'] = transcript['time']/24.\n",
    "    \n",
    "\n",
    "    transcript.rename(columns={'person': 'user_id'}, inplace=True)\n",
    "    \n",
    "    return transcript"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# update transcript\n",
    "transcript = update_function(transcript)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>time</th>\n",
       "      <th>value</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>offer received</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>0.0</td>\n",
       "      <td>{'offer id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>offer received</td>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>0.0</td>\n",
       "      <td>{'offer id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>offer received</td>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>0.0</td>\n",
       "      <td>{'offer id': '2906b810c7d4411798c6938adc9daaa5'}</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>offer received</td>\n",
       "      <td>8ec6ce2a7e7949b1bf142def7d0e0586</td>\n",
       "      <td>0.0</td>\n",
       "      <td>{'offer id': 'fafdcd668e3743c1bb461111dcafc2a4'}</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>offer received</td>\n",
       "      <td>68617ca6246f4fbc85e91a2a49552598</td>\n",
       "      <td>0.0</td>\n",
       "      <td>{'offer id': '4d5c57ea9a6940dd891ad53e9dbe8da0'}</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            event                           user_id  time  \\\n",
       "0  offer received  78afa995795e4d85b5d9ceeca43f5fef   0.0   \n",
       "1  offer received  a03223e636434f42ac4c3df47e8bac43   0.0   \n",
       "2  offer received  e2127556f4f64592b11af22de27a7932   0.0   \n",
       "3  offer received  8ec6ce2a7e7949b1bf142def7d0e0586   0.0   \n",
       "4  offer received  68617ca6246f4fbc85e91a2a49552598   0.0   \n",
       "\n",
       "                                              value  \\\n",
       "0  {'offer id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}   \n",
       "1  {'offer id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}   \n",
       "2  {'offer id': '2906b810c7d4411798c6938adc9daaa5'}   \n",
       "3  {'offer id': 'fafdcd668e3743c1bb461111dcafc2a4'}   \n",
       "4  {'offer id': '4d5c57ea9a6940dd891ad53e9dbe8da0'}   \n",
       "\n",
       "                           offer_id  amount  reward  \n",
       "0  9b98b8c7a33c4b65b9aebfe6a799e6d9     NaN     NaN  \n",
       "1  0b1e1539f2cc45b7b9fa7c272da2e1d7     NaN     NaN  \n",
       "2  2906b810c7d4411798c6938adc9daaa5     NaN     NaN  \n",
       "3  fafdcd668e3743c1bb461111dcafc2a4     NaN     NaN  \n",
       "4  4d5c57ea9a6940dd891ad53e9dbe8da0     NaN     NaN  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transcript.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>time</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>offer received</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>offer received</td>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>offer received</td>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>offer received</td>\n",
       "      <td>8ec6ce2a7e7949b1bf142def7d0e0586</td>\n",
       "      <td>0.0</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>offer received</td>\n",
       "      <td>68617ca6246f4fbc85e91a2a49552598</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            event                           user_id  time  \\\n",
       "0  offer received  78afa995795e4d85b5d9ceeca43f5fef   0.0   \n",
       "1  offer received  a03223e636434f42ac4c3df47e8bac43   0.0   \n",
       "2  offer received  e2127556f4f64592b11af22de27a7932   0.0   \n",
       "3  offer received  8ec6ce2a7e7949b1bf142def7d0e0586   0.0   \n",
       "4  offer received  68617ca6246f4fbc85e91a2a49552598   0.0   \n",
       "\n",
       "                           offer_id  amount  reward  \n",
       "0  9b98b8c7a33c4b65b9aebfe6a799e6d9     NaN     NaN  \n",
       "1  0b1e1539f2cc45b7b9fa7c272da2e1d7     NaN     NaN  \n",
       "2  2906b810c7d4411798c6938adc9daaa5     NaN     NaN  \n",
       "3  fafdcd668e3743c1bb461111dcafc2a4     NaN     NaN  \n",
       "4  4d5c57ea9a6940dd891ad53e9dbe8da0     NaN     NaN  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transcript = transcript.drop('value', axis=1)\n",
    "transcript.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['offer received', 'offer viewed', 'transaction', 'offer completed'], dtype=object)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print unique values in feature event\n",
    "transcript['event'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "transcript = pd.get_dummies(transcript, columns=['event'], prefix = '', prefix_sep='')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>time</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "      <th>offer completed</th>\n",
       "      <th>offer received</th>\n",
       "      <th>offer viewed</th>\n",
       "      <th>transaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8ec6ce2a7e7949b1bf142def7d0e0586</td>\n",
       "      <td>0.0</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>68617ca6246f4fbc85e91a2a49552598</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            user_id  time                          offer_id  \\\n",
       "0  78afa995795e4d85b5d9ceeca43f5fef   0.0  9b98b8c7a33c4b65b9aebfe6a799e6d9   \n",
       "1  a03223e636434f42ac4c3df47e8bac43   0.0  0b1e1539f2cc45b7b9fa7c272da2e1d7   \n",
       "2  e2127556f4f64592b11af22de27a7932   0.0  2906b810c7d4411798c6938adc9daaa5   \n",
       "3  8ec6ce2a7e7949b1bf142def7d0e0586   0.0  fafdcd668e3743c1bb461111dcafc2a4   \n",
       "4  68617ca6246f4fbc85e91a2a49552598   0.0  4d5c57ea9a6940dd891ad53e9dbe8da0   \n",
       "\n",
       "   amount  reward  offer completed  offer received  offer viewed  transaction  \n",
       "0     NaN     NaN                0               1             0            0  \n",
       "1     NaN     NaN                0               1             0            0  \n",
       "2     NaN     NaN                0               1             0            0  \n",
       "3     NaN     NaN                0               1             0            0  \n",
       "4     NaN     NaN                0               1             0            0  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transcript.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sum all custumer's numeric data\n",
    "transcript = transcript.groupby('user_id').sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop transaction\n",
    "transcript =  transcript.drop('transaction', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>time</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "      <th>offer completed</th>\n",
       "      <th>offer received</th>\n",
       "      <th>offer viewed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0009655768c64bdeb2e877511632db8f</td>\n",
       "      <td>392.25</td>\n",
       "      <td>127.60</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00116118485d4dfda04fdbaba9a87b5c</td>\n",
       "      <td>117.25</td>\n",
       "      <td>4.09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0011e0d4e6b944f998e987f904e8c1e5</td>\n",
       "      <td>273.75</td>\n",
       "      <td>79.46</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0020c2b971eb4e9188eac86d93036a77</td>\n",
       "      <td>265.75</td>\n",
       "      <td>196.86</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0020ccbbb6d84e358d3414a3ff76cffd</td>\n",
       "      <td>359.25</td>\n",
       "      <td>154.05</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            user_id    time  amount  reward  offer completed  \\\n",
       "0  0009655768c64bdeb2e877511632db8f  392.25  127.60     9.0                3   \n",
       "1  00116118485d4dfda04fdbaba9a87b5c  117.25    4.09     0.0                0   \n",
       "2  0011e0d4e6b944f998e987f904e8c1e5  273.75   79.46    13.0                3   \n",
       "3  0020c2b971eb4e9188eac86d93036a77  265.75  196.86    14.0                3   \n",
       "4  0020ccbbb6d84e358d3414a3ff76cffd  359.25  154.05    13.0                3   \n",
       "\n",
       "   offer received  offer viewed  \n",
       "0               5             4  \n",
       "1               2             2  \n",
       "2               5             5  \n",
       "3               5             3  \n",
       "4               4             4  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transcript.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge data\n",
    "merge_data = pd.merge(  transcript, profile,  on = 'user_id', how = 'right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>time</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "      <th>offer completed</th>\n",
       "      <th>offer received</th>\n",
       "      <th>offer viewed</th>\n",
       "      <th>age</th>\n",
       "      <th>became_member_on</th>\n",
       "      <th>gender</th>\n",
       "      <th>income</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0009655768c64bdeb2e877511632db8f</td>\n",
       "      <td>392.25</td>\n",
       "      <td>127.60</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>2017-04-21</td>\n",
       "      <td>1</td>\n",
       "      <td>72000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0011e0d4e6b944f998e987f904e8c1e5</td>\n",
       "      <td>273.75</td>\n",
       "      <td>79.46</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>2018-01-09</td>\n",
       "      <td>0</td>\n",
       "      <td>57000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0020c2b971eb4e9188eac86d93036a77</td>\n",
       "      <td>265.75</td>\n",
       "      <td>196.86</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>2016-03-04</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0020ccbbb6d84e358d3414a3ff76cffd</td>\n",
       "      <td>359.25</td>\n",
       "      <td>154.05</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "      <td>2016-11-11</td>\n",
       "      <td>0</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>003d66b6608740288d6cc97a6903f4f0</td>\n",
       "      <td>488.25</td>\n",
       "      <td>48.34</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>2017-06-21</td>\n",
       "      <td>0</td>\n",
       "      <td>73000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>00426fe3ffde4c6b9cb9ad6d077a13ea</td>\n",
       "      <td>271.00</td>\n",
       "      <td>68.51</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>2016-08-09</td>\n",
       "      <td>0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>004b041fbfe44859945daa2c7f79ee64</td>\n",
       "      <td>247.00</td>\n",
       "      <td>138.36</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>55</td>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>0</td>\n",
       "      <td>74000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>004c5799adbf42868b9cff0396190900</td>\n",
       "      <td>469.50</td>\n",
       "      <td>347.38</td>\n",
       "      <td>24.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-31</td>\n",
       "      <td>1</td>\n",
       "      <td>99000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>3</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>005500a7188546ff8a767329a2f7c76a</td>\n",
       "      <td>195.75</td>\n",
       "      <td>20.36</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>56</td>\n",
       "      <td>2017-12-09</td>\n",
       "      <td>1</td>\n",
       "      <td>47000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0056df74b63b4298809f0b375a304cf4</td>\n",
       "      <td>257.00</td>\n",
       "      <td>144.14</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>2016-08-21</td>\n",
       "      <td>1</td>\n",
       "      <td>91000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>8</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>00715b6e55c3431cb56ff7307eb19675</td>\n",
       "      <td>375.75</td>\n",
       "      <td>375.12</td>\n",
       "      <td>32.0</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>58</td>\n",
       "      <td>2017-12-07</td>\n",
       "      <td>0</td>\n",
       "      <td>119000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0082fd87c18f45f2be70dbcbb0fb8aad</td>\n",
       "      <td>254.75</td>\n",
       "      <td>121.85</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>28</td>\n",
       "      <td>2017-09-08</td>\n",
       "      <td>0</td>\n",
       "      <td>68000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>00840a2ca5d2408e982d56544dc14ffd</td>\n",
       "      <td>464.75</td>\n",
       "      <td>62.93</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>2014-12-21</td>\n",
       "      <td>1</td>\n",
       "      <td>61000.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>12</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>00857b24b13f4fe0ad17b605f00357f5</td>\n",
       "      <td>170.25</td>\n",
       "      <td>6.26</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>71</td>\n",
       "      <td>2017-10-23</td>\n",
       "      <td>1</td>\n",
       "      <td>41000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>008d7088107b468893889da0ede0df5c</td>\n",
       "      <td>235.00</td>\n",
       "      <td>16.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>24</td>\n",
       "      <td>2017-09-10</td>\n",
       "      <td>1</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0091d2b6a5ea4defaa8393e4e816db60</td>\n",
       "      <td>350.00</td>\n",
       "      <td>279.16</td>\n",
       "      <td>25.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>62</td>\n",
       "      <td>2016-06-17</td>\n",
       "      <td>0</td>\n",
       "      <td>81000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0099bf30e4cb4265875266eb3eb25eab</td>\n",
       "      <td>240.75</td>\n",
       "      <td>105.83</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>61</td>\n",
       "      <td>2018-02-14</td>\n",
       "      <td>1</td>\n",
       "      <td>66000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>00a794f62b9a48beb58f8f6c02c2f1a6</td>\n",
       "      <td>273.25</td>\n",
       "      <td>166.40</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>88</td>\n",
       "      <td>2015-10-24</td>\n",
       "      <td>0</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>00ae03011f9f49b8a4b3e6d416678b0b</td>\n",
       "      <td>416.00</td>\n",
       "      <td>218.05</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>55</td>\n",
       "      <td>2015-11-15</td>\n",
       "      <td>1</td>\n",
       "      <td>83000.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>00aee28bbb3848dd8a31f0c91dc267dd</td>\n",
       "      <td>175.50</td>\n",
       "      <td>20.53</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>2018-01-06</td>\n",
       "      <td>1</td>\n",
       "      <td>59000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>00b18b535d6d4f779dea4dc9ac451478</td>\n",
       "      <td>250.75</td>\n",
       "      <td>133.25</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>72</td>\n",
       "      <td>2017-04-07</td>\n",
       "      <td>1</td>\n",
       "      <td>102000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>00b3400e4ff64ee68ce9ada1d0c222f0</td>\n",
       "      <td>350.00</td>\n",
       "      <td>163.92</td>\n",
       "      <td>17.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>1</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>8</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>00b3c376db2a4115af3aef34a02f61d6</td>\n",
       "      <td>311.75</td>\n",
       "      <td>219.63</td>\n",
       "      <td>25.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>2017-06-27</td>\n",
       "      <td>1</td>\n",
       "      <td>104000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>00b901d68f8f4fd68075184cd0f772d2</td>\n",
       "      <td>161.25</td>\n",
       "      <td>53.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>68</td>\n",
       "      <td>2018-06-22</td>\n",
       "      <td>0</td>\n",
       "      <td>76000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>00bbce6533f44ddeaf4dd32bcab55441</td>\n",
       "      <td>301.50</td>\n",
       "      <td>77.21</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>94</td>\n",
       "      <td>2014-11-28</td>\n",
       "      <td>1</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>11</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>00bc42a62f884b41a13cc595856cf7c3</td>\n",
       "      <td>370.25</td>\n",
       "      <td>150.64</td>\n",
       "      <td>19.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>44</td>\n",
       "      <td>2016-01-11</td>\n",
       "      <td>1</td>\n",
       "      <td>72000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>00bc983061d3471e8c8e74d31b7c8b6f</td>\n",
       "      <td>110.00</td>\n",
       "      <td>63.50</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>59</td>\n",
       "      <td>2017-10-16</td>\n",
       "      <td>1</td>\n",
       "      <td>77000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>00c20a9202d5475190b31a24de6fb06d</td>\n",
       "      <td>325.75</td>\n",
       "      <td>164.01</td>\n",
       "      <td>23.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>52</td>\n",
       "      <td>2016-03-06</td>\n",
       "      <td>0</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>00c2f812f4604c8893152a5c6572030e</td>\n",
       "      <td>266.00</td>\n",
       "      <td>124.09</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>2018-06-30</td>\n",
       "      <td>0</td>\n",
       "      <td>102000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>6</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>00c32a104f0c4065b5b552895fb22e34</td>\n",
       "      <td>99.25</td>\n",
       "      <td>6.98</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>2017-12-22</td>\n",
       "      <td>1</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14795</th>\n",
       "      <td>ff8bee9ba3754ac687d9af685b2981b7</td>\n",
       "      <td>90.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>1</td>\n",
       "      <td>72000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14796</th>\n",
       "      <td>ff8ff8e5d8bb449894bf708924020edc</td>\n",
       "      <td>321.00</td>\n",
       "      <td>96.74</td>\n",
       "      <td>19.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>78</td>\n",
       "      <td>2016-06-08</td>\n",
       "      <td>0</td>\n",
       "      <td>58000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14797</th>\n",
       "      <td>ff932c6f8bb641bd816955337d153676</td>\n",
       "      <td>410.50</td>\n",
       "      <td>249.50</td>\n",
       "      <td>29.0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>65</td>\n",
       "      <td>2015-09-29</td>\n",
       "      <td>1</td>\n",
       "      <td>76000.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>9</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14798</th>\n",
       "      <td>ff95e0a9cdfd4030958762dadcb11e1a</td>\n",
       "      <td>164.50</td>\n",
       "      <td>60.23</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>79</td>\n",
       "      <td>2017-05-20</td>\n",
       "      <td>1</td>\n",
       "      <td>93000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14799</th>\n",
       "      <td>ff992fbec53145bbae59a68d025e0458</td>\n",
       "      <td>625.75</td>\n",
       "      <td>73.91</td>\n",
       "      <td>12.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>68</td>\n",
       "      <td>2017-11-02</td>\n",
       "      <td>1</td>\n",
       "      <td>51000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14800</th>\n",
       "      <td>ff9beda564da4bab81633fca744037dc</td>\n",
       "      <td>318.00</td>\n",
       "      <td>77.19</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>41</td>\n",
       "      <td>2017-12-07</td>\n",
       "      <td>0</td>\n",
       "      <td>53000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14801</th>\n",
       "      <td>ff9f73ead16a4f9b9e1a53a27280af92</td>\n",
       "      <td>299.50</td>\n",
       "      <td>263.30</td>\n",
       "      <td>22.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>43</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>0</td>\n",
       "      <td>67000.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14802</th>\n",
       "      <td>ffa81afacde642a3a51a7cd99f8d2cd7</td>\n",
       "      <td>293.25</td>\n",
       "      <td>275.36</td>\n",
       "      <td>20.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>76</td>\n",
       "      <td>2016-09-06</td>\n",
       "      <td>1</td>\n",
       "      <td>115000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14803</th>\n",
       "      <td>ffac285a64714aca8efd8d61a5606e84</td>\n",
       "      <td>135.50</td>\n",
       "      <td>9.63</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>2017-10-22</td>\n",
       "      <td>1</td>\n",
       "      <td>36000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14804</th>\n",
       "      <td>ffaecba5bbb14cffb04c2490d18eee7e</td>\n",
       "      <td>348.50</td>\n",
       "      <td>174.33</td>\n",
       "      <td>22.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>2017-08-30</td>\n",
       "      <td>1</td>\n",
       "      <td>86000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14805</th>\n",
       "      <td>ffb62bee02c14583b9763f8613bcace7</td>\n",
       "      <td>231.00</td>\n",
       "      <td>22.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>94</td>\n",
       "      <td>2014-08-23</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>8</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14806</th>\n",
       "      <td>ffb7fc8ad0594248a49e210ff0217c2d</td>\n",
       "      <td>328.50</td>\n",
       "      <td>166.52</td>\n",
       "      <td>17.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>57</td>\n",
       "      <td>2015-09-02</td>\n",
       "      <td>0</td>\n",
       "      <td>118000.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14807</th>\n",
       "      <td>ffc60f10c2444740bc2049712bbffe17</td>\n",
       "      <td>167.25</td>\n",
       "      <td>19.92</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>81</td>\n",
       "      <td>2018-05-04</td>\n",
       "      <td>0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14808</th>\n",
       "      <td>ffc6c9fbe34b4578911dcdf6745b4c74</td>\n",
       "      <td>73.75</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "      <td>2018-04-10</td>\n",
       "      <td>0</td>\n",
       "      <td>57000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14809</th>\n",
       "      <td>ffc77312ccda49fca19506f1cdf44923</td>\n",
       "      <td>279.50</td>\n",
       "      <td>33.77</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>2017-03-19</td>\n",
       "      <td>1</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14810</th>\n",
       "      <td>ffc8a38e0972421785b00f80c92c8085</td>\n",
       "      <td>246.75</td>\n",
       "      <td>142.70</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>2018-02-25</td>\n",
       "      <td>1</td>\n",
       "      <td>92000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14811</th>\n",
       "      <td>ffd53e5ba61d41378b66efc00d9f9682</td>\n",
       "      <td>431.00</td>\n",
       "      <td>89.44</td>\n",
       "      <td>25.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>40</td>\n",
       "      <td>2017-02-16</td>\n",
       "      <td>1</td>\n",
       "      <td>32000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14812</th>\n",
       "      <td>ffd810f301ad42d6bfe98c4ba6ee4125</td>\n",
       "      <td>66.25</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>65</td>\n",
       "      <td>2018-02-15</td>\n",
       "      <td>1</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14813</th>\n",
       "      <td>ffda4545e7084ff6aaf01304fb1c1fa6</td>\n",
       "      <td>204.25</td>\n",
       "      <td>43.76</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>67</td>\n",
       "      <td>2018-07-21</td>\n",
       "      <td>0</td>\n",
       "      <td>95000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>7</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14814</th>\n",
       "      <td>ffdefcac307f4ca99ac1ebd51470f106</td>\n",
       "      <td>255.75</td>\n",
       "      <td>101.32</td>\n",
       "      <td>24.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>87</td>\n",
       "      <td>2017-03-15</td>\n",
       "      <td>0</td>\n",
       "      <td>47000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14815</th>\n",
       "      <td>ffe5257abf8840b395e1ee6b29894637</td>\n",
       "      <td>198.25</td>\n",
       "      <td>63.49</td>\n",
       "      <td>12.0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>77</td>\n",
       "      <td>2017-08-22</td>\n",
       "      <td>1</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14816</th>\n",
       "      <td>ffeaa02452ef451082a0361c3ca62ef5</td>\n",
       "      <td>384.00</td>\n",
       "      <td>234.05</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>67</td>\n",
       "      <td>2017-02-19</td>\n",
       "      <td>0</td>\n",
       "      <td>77000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14817</th>\n",
       "      <td>ffed75d3abc64b488982f50ed12878b5</td>\n",
       "      <td>29.25</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>2018-03-15</td>\n",
       "      <td>1</td>\n",
       "      <td>44000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14818</th>\n",
       "      <td>fff0f0aac6c547b9b263080f09a5586a</td>\n",
       "      <td>192.00</td>\n",
       "      <td>116.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>67</td>\n",
       "      <td>2017-06-15</td>\n",
       "      <td>1</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14819</th>\n",
       "      <td>fff29fb549084123bd046dbc5ceb4faa</td>\n",
       "      <td>442.50</td>\n",
       "      <td>291.47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>59</td>\n",
       "      <td>2017-08-31</td>\n",
       "      <td>0</td>\n",
       "      <td>93000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14820</th>\n",
       "      <td>fff3ba4757bd42088c044ca26d73817a</td>\n",
       "      <td>256.50</td>\n",
       "      <td>580.98</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>69</td>\n",
       "      <td>2015-09-20</td>\n",
       "      <td>0</td>\n",
       "      <td>83000.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14821</th>\n",
       "      <td>fff7576017104bcc8677a8d63322b5e1</td>\n",
       "      <td>272.00</td>\n",
       "      <td>29.94</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>71</td>\n",
       "      <td>2017-10-31</td>\n",
       "      <td>1</td>\n",
       "      <td>73000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14822</th>\n",
       "      <td>fff8957ea8b240a6b5e634b6ee8eafcf</td>\n",
       "      <td>186.50</td>\n",
       "      <td>12.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>71</td>\n",
       "      <td>2018-02-18</td>\n",
       "      <td>1</td>\n",
       "      <td>56000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14823</th>\n",
       "      <td>fffad4f4828548d1b5583907f2e9906b</td>\n",
       "      <td>313.50</td>\n",
       "      <td>88.83</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>2017-01-23</td>\n",
       "      <td>1</td>\n",
       "      <td>34000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14824</th>\n",
       "      <td>ffff82501cea40309d5fdd7edcca4a07</td>\n",
       "      <td>470.50</td>\n",
       "      <td>226.07</td>\n",
       "      <td>18.0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>45</td>\n",
       "      <td>2016-11-25</td>\n",
       "      <td>0</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>11</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14825 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                user_id    time  amount  reward  \\\n",
       "0      0009655768c64bdeb2e877511632db8f  392.25  127.60     9.0   \n",
       "1      0011e0d4e6b944f998e987f904e8c1e5  273.75   79.46    13.0   \n",
       "2      0020c2b971eb4e9188eac86d93036a77  265.75  196.86    14.0   \n",
       "3      0020ccbbb6d84e358d3414a3ff76cffd  359.25  154.05    13.0   \n",
       "4      003d66b6608740288d6cc97a6903f4f0  488.25   48.34     9.0   \n",
       "5      00426fe3ffde4c6b9cb9ad6d077a13ea  271.00   68.51     2.0   \n",
       "6      004b041fbfe44859945daa2c7f79ee64  247.00  138.36     7.0   \n",
       "7      004c5799adbf42868b9cff0396190900  469.50  347.38    24.0   \n",
       "8      005500a7188546ff8a767329a2f7c76a  195.75   20.36     5.0   \n",
       "9      0056df74b63b4298809f0b375a304cf4  257.00  144.14    13.0   \n",
       "10     00715b6e55c3431cb56ff7307eb19675  375.75  375.12    32.0   \n",
       "11     0082fd87c18f45f2be70dbcbb0fb8aad  254.75  121.85    10.0   \n",
       "12     00840a2ca5d2408e982d56544dc14ffd  464.75   62.93     9.0   \n",
       "13     00857b24b13f4fe0ad17b605f00357f5  170.25    6.26     0.0   \n",
       "14     008d7088107b468893889da0ede0df5c  235.00   16.18     0.0   \n",
       "15     0091d2b6a5ea4defaa8393e4e816db60  350.00  279.16    25.0   \n",
       "16     0099bf30e4cb4265875266eb3eb25eab  240.75  105.83     7.0   \n",
       "17     00a794f62b9a48beb58f8f6c02c2f1a6  273.25  166.40     5.0   \n",
       "18     00ae03011f9f49b8a4b3e6d416678b0b  416.00  218.05    26.0   \n",
       "19     00aee28bbb3848dd8a31f0c91dc267dd  175.50   20.53     0.0   \n",
       "20     00b18b535d6d4f779dea4dc9ac451478  250.75  133.25     8.0   \n",
       "21     00b3400e4ff64ee68ce9ada1d0c222f0  350.00  163.92    17.0   \n",
       "22     00b3c376db2a4115af3aef34a02f61d6  311.75  219.63    25.0   \n",
       "23     00b901d68f8f4fd68075184cd0f772d2  161.25   53.55     0.0   \n",
       "24     00bbce6533f44ddeaf4dd32bcab55441  301.50   77.21     9.0   \n",
       "25     00bc42a62f884b41a13cc595856cf7c3  370.25  150.64    19.0   \n",
       "26     00bc983061d3471e8c8e74d31b7c8b6f  110.00   63.50    10.0   \n",
       "27     00c20a9202d5475190b31a24de6fb06d  325.75  164.01    23.0   \n",
       "28     00c2f812f4604c8893152a5c6572030e  266.00  124.09    14.0   \n",
       "29     00c32a104f0c4065b5b552895fb22e34   99.25    6.98     0.0   \n",
       "...                                 ...     ...     ...     ...   \n",
       "14795  ff8bee9ba3754ac687d9af685b2981b7   90.00    0.00     0.0   \n",
       "14796  ff8ff8e5d8bb449894bf708924020edc  321.00   96.74    19.0   \n",
       "14797  ff932c6f8bb641bd816955337d153676  410.50  249.50    29.0   \n",
       "14798  ff95e0a9cdfd4030958762dadcb11e1a  164.50   60.23    10.0   \n",
       "14799  ff992fbec53145bbae59a68d025e0458  625.75   73.91    12.0   \n",
       "14800  ff9beda564da4bab81633fca744037dc  318.00   77.19    13.0   \n",
       "14801  ff9f73ead16a4f9b9e1a53a27280af92  299.50  263.30    22.0   \n",
       "14802  ffa81afacde642a3a51a7cd99f8d2cd7  293.25  275.36    20.0   \n",
       "14803  ffac285a64714aca8efd8d61a5606e84  135.50    9.63     5.0   \n",
       "14804  ffaecba5bbb14cffb04c2490d18eee7e  348.50  174.33    22.0   \n",
       "14805  ffb62bee02c14583b9763f8613bcace7  231.00   22.20     0.0   \n",
       "14806  ffb7fc8ad0594248a49e210ff0217c2d  328.50  166.52    17.0   \n",
       "14807  ffc60f10c2444740bc2049712bbffe17  167.25   19.92     0.0   \n",
       "14808  ffc6c9fbe34b4578911dcdf6745b4c74   73.75    0.00     0.0   \n",
       "14809  ffc77312ccda49fca19506f1cdf44923  279.50   33.77     0.0   \n",
       "14810  ffc8a38e0972421785b00f80c92c8085  246.75  142.70    15.0   \n",
       "14811  ffd53e5ba61d41378b66efc00d9f9682  431.00   89.44    25.0   \n",
       "14812  ffd810f301ad42d6bfe98c4ba6ee4125   66.25    0.00     0.0   \n",
       "14813  ffda4545e7084ff6aaf01304fb1c1fa6  204.25   43.76     7.0   \n",
       "14814  ffdefcac307f4ca99ac1ebd51470f106  255.75  101.32    24.0   \n",
       "14815  ffe5257abf8840b395e1ee6b29894637  198.25   63.49    12.0   \n",
       "14816  ffeaa02452ef451082a0361c3ca62ef5  384.00  234.05    14.0   \n",
       "14817  ffed75d3abc64b488982f50ed12878b5   29.25    0.00     0.0   \n",
       "14818  fff0f0aac6c547b9b263080f09a5586a  192.00  116.90     0.0   \n",
       "14819  fff29fb549084123bd046dbc5ceb4faa  442.50  291.47    47.0   \n",
       "14820  fff3ba4757bd42088c044ca26d73817a  256.50  580.98     9.0   \n",
       "14821  fff7576017104bcc8677a8d63322b5e1  272.00   29.94     9.0   \n",
       "14822  fff8957ea8b240a6b5e634b6ee8eafcf  186.50   12.15     0.0   \n",
       "14823  fffad4f4828548d1b5583907f2e9906b  313.50   88.83    15.0   \n",
       "14824  ffff82501cea40309d5fdd7edcca4a07  470.50  226.07    18.0   \n",
       "\n",
       "       offer completed  offer received  offer viewed  age became_member_on  \\\n",
       "0                    3               5             4   33       2017-04-21   \n",
       "1                    3               5             5   40       2018-01-09   \n",
       "2                    3               5             3   59       2016-03-04   \n",
       "3                    3               4             4   24       2016-11-11   \n",
       "4                    3               5             4   26       2017-06-21   \n",
       "5                    1               5             2   19       2016-08-09   \n",
       "6                    2               3             2   55       2018-05-08   \n",
       "7                    5               5             4   54       2016-03-31   \n",
       "8                    1               5             3   56       2017-12-09   \n",
       "9                    3               4             3   54       2016-08-21   \n",
       "10                   5               6             3   58       2017-12-07   \n",
       "11                   2               5             4   28       2017-09-08   \n",
       "12                   3               6             2   26       2014-12-21   \n",
       "13                   0               5             3   71       2017-10-23   \n",
       "14                   0               6             5   24       2017-09-10   \n",
       "15                   4               5             5   62       2016-06-17   \n",
       "16                   2               5             3   61       2018-02-14   \n",
       "17                   1               5             5   88       2015-10-24   \n",
       "18                   4               6             5   55       2015-11-15   \n",
       "19                   0               3             2   21       2018-01-06   \n",
       "20                   3               5             5   72       2017-04-07   \n",
       "21                   3               5             2   62       2016-08-25   \n",
       "22                   3               3             2   50       2017-06-27   \n",
       "23                   0               4             4   68       2018-06-22   \n",
       "24                   3               4             4   94       2014-11-28   \n",
       "25                   5               5             4   44       2016-01-11   \n",
       "26                   1               4             2   59       2017-10-16   \n",
       "27                   4               4             4   52       2016-03-06   \n",
       "28                   3               5             4   58       2018-06-30   \n",
       "29                   0               4             3   33       2017-12-22   \n",
       "...                ...             ...           ...  ...              ...   \n",
       "14795                0               3             3   64       2018-05-31   \n",
       "14796                4               5             5   78       2016-06-08   \n",
       "14797                6               6             6   65       2015-09-29   \n",
       "14798                2               5             1   79       2017-05-20   \n",
       "14799                4               6             6   68       2017-11-02   \n",
       "14800                3               5             4   41       2017-12-07   \n",
       "14801                4               4             3   43       2015-07-31   \n",
       "14802                4               5             2   76       2016-09-06   \n",
       "14803                1               3             1   28       2017-10-22   \n",
       "14804                4               6             5   50       2017-08-30   \n",
       "14805                0               5             3   94       2014-08-23   \n",
       "14806                4               6             4   57       2015-09-02   \n",
       "14807                0               5             4   81       2018-05-04   \n",
       "14808                0               3             2   62       2018-04-10   \n",
       "14809                0               5             2   37       2017-03-19   \n",
       "14810                2               3             2   57       2018-02-25   \n",
       "14811                5               5             2   40       2017-02-16   \n",
       "14812                0               3             3   65       2018-02-15   \n",
       "14813                2               5             3   67       2018-07-21   \n",
       "14814                5               5             2   87       2017-03-15   \n",
       "14815                3               6             2   77       2017-08-22   \n",
       "14816                3               5             5   67       2017-02-19   \n",
       "14817                0               2             2   20       2018-03-15   \n",
       "14818                0               3             3   67       2017-06-15   \n",
       "14819                6               6             5   59       2017-08-31   \n",
       "14820                3               6             3   69       2015-09-20   \n",
       "14821                3               5             4   71       2017-10-31   \n",
       "14822                0               3             2   71       2018-02-18   \n",
       "14823                3               4             4   34       2017-01-23   \n",
       "14824                6               6             6   45       2016-11-25   \n",
       "\n",
       "       gender    income  start_year  start_month  start_day  \n",
       "0           1   72000.0        2017            4         21  \n",
       "1           0   57000.0        2018            1          9  \n",
       "2           0   90000.0        2016            3          4  \n",
       "3           0   60000.0        2016           11         11  \n",
       "4           0   73000.0        2017            6         21  \n",
       "5           0   65000.0        2016            8          9  \n",
       "6           0   74000.0        2018            5          8  \n",
       "7           1   99000.0        2016            3         31  \n",
       "8           1   47000.0        2017           12          9  \n",
       "9           1   91000.0        2016            8         21  \n",
       "10          0  119000.0        2017           12          7  \n",
       "11          0   68000.0        2017            9          8  \n",
       "12          1   61000.0        2014           12         21  \n",
       "13          1   41000.0        2017           10         23  \n",
       "14          1   42000.0        2017            9         10  \n",
       "15          0   81000.0        2016            6         17  \n",
       "16          1   66000.0        2018            2         14  \n",
       "17          0   54000.0        2015           10         24  \n",
       "18          1   83000.0        2015           11         15  \n",
       "19          1   59000.0        2018            1          6  \n",
       "20          1  102000.0        2017            4          7  \n",
       "21          1   80000.0        2016            8         25  \n",
       "22          1  104000.0        2017            6         27  \n",
       "23          0   76000.0        2018            6         22  \n",
       "24          1   50000.0        2014           11         28  \n",
       "25          1   72000.0        2016            1         11  \n",
       "26          1   77000.0        2017           10         16  \n",
       "27          0   80000.0        2016            3          6  \n",
       "28          0  102000.0        2018            6         30  \n",
       "29          1   42000.0        2017           12         22  \n",
       "...       ...       ...         ...          ...        ...  \n",
       "14795       1   72000.0        2018            5         31  \n",
       "14796       0   58000.0        2016            6          8  \n",
       "14797       1   76000.0        2015            9         29  \n",
       "14798       1   93000.0        2017            5         20  \n",
       "14799       1   51000.0        2017           11          2  \n",
       "14800       0   53000.0        2017           12          7  \n",
       "14801       0   67000.0        2015            7         31  \n",
       "14802       1  115000.0        2016            9          6  \n",
       "14803       1   36000.0        2017           10         22  \n",
       "14804       1   86000.0        2017            8         30  \n",
       "14805       0   75000.0        2014            8         23  \n",
       "14806       0  118000.0        2015            9          2  \n",
       "14807       0   65000.0        2018            5          4  \n",
       "14808       0   57000.0        2018            4         10  \n",
       "14809       1   70000.0        2017            3         19  \n",
       "14810       1   92000.0        2018            2         25  \n",
       "14811       1   32000.0        2017            2         16  \n",
       "14812       1   52000.0        2018            2         15  \n",
       "14813       0   95000.0        2018            7         21  \n",
       "14814       0   47000.0        2017            3         15  \n",
       "14815       1   75000.0        2017            8         22  \n",
       "14816       0   77000.0        2017            2         19  \n",
       "14817       1   44000.0        2018            3         15  \n",
       "14818       1   80000.0        2017            6         15  \n",
       "14819       0   93000.0        2017            8         31  \n",
       "14820       0   83000.0        2015            9         20  \n",
       "14821       1   73000.0        2017           10         31  \n",
       "14822       1   56000.0        2018            2         18  \n",
       "14823       1   34000.0        2017            1         23  \n",
       "14824       0   62000.0        2016           11         25  \n",
       "\n",
       "[14825 rows x 14 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_data= merge_data[['time', 'offer completed', 'amount', 'reward','age' , 'gender' , 'income']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>offer completed</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>392.25</td>\n",
       "      <td>3</td>\n",
       "      <td>127.60</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>72000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>273.75</td>\n",
       "      <td>3</td>\n",
       "      <td>79.46</td>\n",
       "      <td>13.0</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>57000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>265.75</td>\n",
       "      <td>3</td>\n",
       "      <td>196.86</td>\n",
       "      <td>14.0</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>359.25</td>\n",
       "      <td>3</td>\n",
       "      <td>154.05</td>\n",
       "      <td>13.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>60000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488.25</td>\n",
       "      <td>3</td>\n",
       "      <td>48.34</td>\n",
       "      <td>9.0</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>73000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>271.00</td>\n",
       "      <td>1</td>\n",
       "      <td>68.51</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>65000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>247.00</td>\n",
       "      <td>2</td>\n",
       "      <td>138.36</td>\n",
       "      <td>7.0</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>74000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>469.50</td>\n",
       "      <td>5</td>\n",
       "      <td>347.38</td>\n",
       "      <td>24.0</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>99000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>195.75</td>\n",
       "      <td>1</td>\n",
       "      <td>20.36</td>\n",
       "      <td>5.0</td>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>47000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>257.00</td>\n",
       "      <td>3</td>\n",
       "      <td>144.14</td>\n",
       "      <td>13.0</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>91000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>375.75</td>\n",
       "      <td>5</td>\n",
       "      <td>375.12</td>\n",
       "      <td>32.0</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>119000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>254.75</td>\n",
       "      <td>2</td>\n",
       "      <td>121.85</td>\n",
       "      <td>10.0</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>68000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>464.75</td>\n",
       "      <td>3</td>\n",
       "      <td>62.93</td>\n",
       "      <td>9.0</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>61000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>170.25</td>\n",
       "      <td>0</td>\n",
       "      <td>6.26</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>41000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>235.00</td>\n",
       "      <td>0</td>\n",
       "      <td>16.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>42000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>350.00</td>\n",
       "      <td>4</td>\n",
       "      <td>279.16</td>\n",
       "      <td>25.0</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>81000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>240.75</td>\n",
       "      <td>2</td>\n",
       "      <td>105.83</td>\n",
       "      <td>7.0</td>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>66000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>273.25</td>\n",
       "      <td>1</td>\n",
       "      <td>166.40</td>\n",
       "      <td>5.0</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>54000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>416.00</td>\n",
       "      <td>4</td>\n",
       "      <td>218.05</td>\n",
       "      <td>26.0</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>83000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>175.50</td>\n",
       "      <td>0</td>\n",
       "      <td>20.53</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>59000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>250.75</td>\n",
       "      <td>3</td>\n",
       "      <td>133.25</td>\n",
       "      <td>8.0</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "      <td>102000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>350.00</td>\n",
       "      <td>3</td>\n",
       "      <td>163.92</td>\n",
       "      <td>17.0</td>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>80000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>311.75</td>\n",
       "      <td>3</td>\n",
       "      <td>219.63</td>\n",
       "      <td>25.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>104000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>161.25</td>\n",
       "      <td>0</td>\n",
       "      <td>53.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>76000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>301.50</td>\n",
       "      <td>3</td>\n",
       "      <td>77.21</td>\n",
       "      <td>9.0</td>\n",
       "      <td>94</td>\n",
       "      <td>1</td>\n",
       "      <td>50000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>370.25</td>\n",
       "      <td>5</td>\n",
       "      <td>150.64</td>\n",
       "      <td>19.0</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>72000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>110.00</td>\n",
       "      <td>1</td>\n",
       "      <td>63.50</td>\n",
       "      <td>10.0</td>\n",
       "      <td>59</td>\n",
       "      <td>1</td>\n",
       "      <td>77000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>325.75</td>\n",
       "      <td>4</td>\n",
       "      <td>164.01</td>\n",
       "      <td>23.0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>80000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>266.00</td>\n",
       "      <td>3</td>\n",
       "      <td>124.09</td>\n",
       "      <td>14.0</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>102000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>99.25</td>\n",
       "      <td>0</td>\n",
       "      <td>6.98</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>42000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14795</th>\n",
       "      <td>90.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>72000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14796</th>\n",
       "      <td>321.00</td>\n",
       "      <td>4</td>\n",
       "      <td>96.74</td>\n",
       "      <td>19.0</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "      <td>58000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14797</th>\n",
       "      <td>410.50</td>\n",
       "      <td>6</td>\n",
       "      <td>249.50</td>\n",
       "      <td>29.0</td>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "      <td>76000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14798</th>\n",
       "      <td>164.50</td>\n",
       "      <td>2</td>\n",
       "      <td>60.23</td>\n",
       "      <td>10.0</td>\n",
       "      <td>79</td>\n",
       "      <td>1</td>\n",
       "      <td>93000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14799</th>\n",
       "      <td>625.75</td>\n",
       "      <td>4</td>\n",
       "      <td>73.91</td>\n",
       "      <td>12.0</td>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>51000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14800</th>\n",
       "      <td>318.00</td>\n",
       "      <td>3</td>\n",
       "      <td>77.19</td>\n",
       "      <td>13.0</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>53000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14801</th>\n",
       "      <td>299.50</td>\n",
       "      <td>4</td>\n",
       "      <td>263.30</td>\n",
       "      <td>22.0</td>\n",
       "      <td>43</td>\n",
       "      <td>0</td>\n",
       "      <td>67000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14802</th>\n",
       "      <td>293.25</td>\n",
       "      <td>4</td>\n",
       "      <td>275.36</td>\n",
       "      <td>20.0</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>115000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14803</th>\n",
       "      <td>135.50</td>\n",
       "      <td>1</td>\n",
       "      <td>9.63</td>\n",
       "      <td>5.0</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>36000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14804</th>\n",
       "      <td>348.50</td>\n",
       "      <td>4</td>\n",
       "      <td>174.33</td>\n",
       "      <td>22.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>86000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14805</th>\n",
       "      <td>231.00</td>\n",
       "      <td>0</td>\n",
       "      <td>22.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>94</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14806</th>\n",
       "      <td>328.50</td>\n",
       "      <td>4</td>\n",
       "      <td>166.52</td>\n",
       "      <td>17.0</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>118000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14807</th>\n",
       "      <td>167.25</td>\n",
       "      <td>0</td>\n",
       "      <td>19.92</td>\n",
       "      <td>0.0</td>\n",
       "      <td>81</td>\n",
       "      <td>0</td>\n",
       "      <td>65000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14808</th>\n",
       "      <td>73.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>57000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14809</th>\n",
       "      <td>279.50</td>\n",
       "      <td>0</td>\n",
       "      <td>33.77</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>70000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14810</th>\n",
       "      <td>246.75</td>\n",
       "      <td>2</td>\n",
       "      <td>142.70</td>\n",
       "      <td>15.0</td>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>92000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14811</th>\n",
       "      <td>431.00</td>\n",
       "      <td>5</td>\n",
       "      <td>89.44</td>\n",
       "      <td>25.0</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>32000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14812</th>\n",
       "      <td>66.25</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "      <td>52000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14813</th>\n",
       "      <td>204.25</td>\n",
       "      <td>2</td>\n",
       "      <td>43.76</td>\n",
       "      <td>7.0</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>95000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14814</th>\n",
       "      <td>255.75</td>\n",
       "      <td>5</td>\n",
       "      <td>101.32</td>\n",
       "      <td>24.0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>47000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14815</th>\n",
       "      <td>198.25</td>\n",
       "      <td>3</td>\n",
       "      <td>63.49</td>\n",
       "      <td>12.0</td>\n",
       "      <td>77</td>\n",
       "      <td>1</td>\n",
       "      <td>75000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14816</th>\n",
       "      <td>384.00</td>\n",
       "      <td>3</td>\n",
       "      <td>234.05</td>\n",
       "      <td>14.0</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>77000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14817</th>\n",
       "      <td>29.25</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>44000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14818</th>\n",
       "      <td>192.00</td>\n",
       "      <td>0</td>\n",
       "      <td>116.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>80000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14819</th>\n",
       "      <td>442.50</td>\n",
       "      <td>6</td>\n",
       "      <td>291.47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>93000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14820</th>\n",
       "      <td>256.50</td>\n",
       "      <td>3</td>\n",
       "      <td>580.98</td>\n",
       "      <td>9.0</td>\n",
       "      <td>69</td>\n",
       "      <td>0</td>\n",
       "      <td>83000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14821</th>\n",
       "      <td>272.00</td>\n",
       "      <td>3</td>\n",
       "      <td>29.94</td>\n",
       "      <td>9.0</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>73000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14822</th>\n",
       "      <td>186.50</td>\n",
       "      <td>0</td>\n",
       "      <td>12.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>56000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14823</th>\n",
       "      <td>313.50</td>\n",
       "      <td>3</td>\n",
       "      <td>88.83</td>\n",
       "      <td>15.0</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>34000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14824</th>\n",
       "      <td>470.50</td>\n",
       "      <td>6</td>\n",
       "      <td>226.07</td>\n",
       "      <td>18.0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>62000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14825 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         time  offer completed  amount  reward  age  gender    income\n",
       "0      392.25                3  127.60     9.0   33       1   72000.0\n",
       "1      273.75                3   79.46    13.0   40       0   57000.0\n",
       "2      265.75                3  196.86    14.0   59       0   90000.0\n",
       "3      359.25                3  154.05    13.0   24       0   60000.0\n",
       "4      488.25                3   48.34     9.0   26       0   73000.0\n",
       "5      271.00                1   68.51     2.0   19       0   65000.0\n",
       "6      247.00                2  138.36     7.0   55       0   74000.0\n",
       "7      469.50                5  347.38    24.0   54       1   99000.0\n",
       "8      195.75                1   20.36     5.0   56       1   47000.0\n",
       "9      257.00                3  144.14    13.0   54       1   91000.0\n",
       "10     375.75                5  375.12    32.0   58       0  119000.0\n",
       "11     254.75                2  121.85    10.0   28       0   68000.0\n",
       "12     464.75                3   62.93     9.0   26       1   61000.0\n",
       "13     170.25                0    6.26     0.0   71       1   41000.0\n",
       "14     235.00                0   16.18     0.0   24       1   42000.0\n",
       "15     350.00                4  279.16    25.0   62       0   81000.0\n",
       "16     240.75                2  105.83     7.0   61       1   66000.0\n",
       "17     273.25                1  166.40     5.0   88       0   54000.0\n",
       "18     416.00                4  218.05    26.0   55       1   83000.0\n",
       "19     175.50                0   20.53     0.0   21       1   59000.0\n",
       "20     250.75                3  133.25     8.0   72       1  102000.0\n",
       "21     350.00                3  163.92    17.0   62       1   80000.0\n",
       "22     311.75                3  219.63    25.0   50       1  104000.0\n",
       "23     161.25                0   53.55     0.0   68       0   76000.0\n",
       "24     301.50                3   77.21     9.0   94       1   50000.0\n",
       "25     370.25                5  150.64    19.0   44       1   72000.0\n",
       "26     110.00                1   63.50    10.0   59       1   77000.0\n",
       "27     325.75                4  164.01    23.0   52       0   80000.0\n",
       "28     266.00                3  124.09    14.0   58       0  102000.0\n",
       "29      99.25                0    6.98     0.0   33       1   42000.0\n",
       "...       ...              ...     ...     ...  ...     ...       ...\n",
       "14795   90.00                0    0.00     0.0   64       1   72000.0\n",
       "14796  321.00                4   96.74    19.0   78       0   58000.0\n",
       "14797  410.50                6  249.50    29.0   65       1   76000.0\n",
       "14798  164.50                2   60.23    10.0   79       1   93000.0\n",
       "14799  625.75                4   73.91    12.0   68       1   51000.0\n",
       "14800  318.00                3   77.19    13.0   41       0   53000.0\n",
       "14801  299.50                4  263.30    22.0   43       0   67000.0\n",
       "14802  293.25                4  275.36    20.0   76       1  115000.0\n",
       "14803  135.50                1    9.63     5.0   28       1   36000.0\n",
       "14804  348.50                4  174.33    22.0   50       1   86000.0\n",
       "14805  231.00                0   22.20     0.0   94       0   75000.0\n",
       "14806  328.50                4  166.52    17.0   57       0  118000.0\n",
       "14807  167.25                0   19.92     0.0   81       0   65000.0\n",
       "14808   73.75                0    0.00     0.0   62       0   57000.0\n",
       "14809  279.50                0   33.77     0.0   37       1   70000.0\n",
       "14810  246.75                2  142.70    15.0   57       1   92000.0\n",
       "14811  431.00                5   89.44    25.0   40       1   32000.0\n",
       "14812   66.25                0    0.00     0.0   65       1   52000.0\n",
       "14813  204.25                2   43.76     7.0   67       0   95000.0\n",
       "14814  255.75                5  101.32    24.0   87       0   47000.0\n",
       "14815  198.25                3   63.49    12.0   77       1   75000.0\n",
       "14816  384.00                3  234.05    14.0   67       0   77000.0\n",
       "14817   29.25                0    0.00     0.0   20       1   44000.0\n",
       "14818  192.00                0  116.90     0.0   67       1   80000.0\n",
       "14819  442.50                6  291.47    47.0   59       0   93000.0\n",
       "14820  256.50                3  580.98     9.0   69       0   83000.0\n",
       "14821  272.00                3   29.94     9.0   71       1   73000.0\n",
       "14822  186.50                0   12.15     0.0   71       1   56000.0\n",
       "14823  313.50                3   88.83    15.0   34       1   34000.0\n",
       "14824  470.50                6  226.07    18.0   45       0   62000.0\n",
       "\n",
       "[14825 rows x 7 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "time               0\n",
       "offer completed    0\n",
       "amount             0\n",
       "reward             0\n",
       "age                0\n",
       "gender             0\n",
       "income             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = model_data[['time', 'amount', 'reward', 'age', 'gender', 'income']]\n",
    "y = model_data['offer completed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/opt/conda/lib/python3.6/site-packages/pandas/core/indexing.py:543: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self.obj[item] = s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>amount</th>\n",
       "      <th>reward</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.438988</td>\n",
       "      <td>0.079319</td>\n",
       "      <td>0.163636</td>\n",
       "      <td>0.180723</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.296174</td>\n",
       "      <td>0.049394</td>\n",
       "      <td>0.236364</td>\n",
       "      <td>0.265060</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.286532</td>\n",
       "      <td>0.122373</td>\n",
       "      <td>0.254545</td>\n",
       "      <td>0.493976</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.399217</td>\n",
       "      <td>0.095761</td>\n",
       "      <td>0.236364</td>\n",
       "      <td>0.072289</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.554685</td>\n",
       "      <td>0.030049</td>\n",
       "      <td>0.163636</td>\n",
       "      <td>0.096386</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.477778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       time    amount    reward       age  gender    income\n",
       "0  0.438988  0.079319  0.163636  0.180723     1.0  0.466667\n",
       "1  0.296174  0.049394  0.236364  0.265060     0.0  0.300000\n",
       "2  0.286532  0.122373  0.254545  0.493976     0.0  0.666667\n",
       "3  0.399217  0.095761  0.236364  0.072289     0.0  0.333333\n",
       "4  0.554685  0.030049  0.163636  0.096386     0.0  0.477778"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc = MinMaxScaler()\n",
    "to_norm = ['time', 'amount', 'reward', 'age', 'gender', 'income']\n",
    "\n",
    "X[to_norm] = sc.fit_transform(X[to_norm])\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.83298262404617518"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LinearRegression\n",
    "lm_model = LinearRegression(normalize=True)\n",
    "# Fit the model \n",
    "lm_model.fit(X_train, y_train)\n",
    "# Pred\n",
    "pred_score = lm_model.predict(X_test)\n",
    "# Check the score \n",
    "r2_score(y_test, pred_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DecisionTreeClassifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.6768276234151606\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "#DecisionTreeClassifier()\n",
    "dtc = DecisionTreeClassifier()\n",
    "#Fit the model\n",
    "dtc.fit(X_train, y_train)\n",
    "#Pred\n",
    "pred_score = dtc.predict(X_test)\n",
    "print('Accuracy {}'.format(accuracy_score(y_test, pred_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Models Results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = [dtc, lm_model ]\n",
    "model_names = [type(n).__name__ for n in models]\n",
    "models_accuracy = [x1.score(X_train, y_train)*100 for x1 in models]\n",
    "bogo_test_accuracy = [y1.score(X_test,y_test)*100 for y1 in models]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DecisionTreeClassifier</th>\n",
       "      <th>LinearRegression</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Training Accuracy</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>83.200169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test Accuracy</th>\n",
       "      <td>67.682762</td>\n",
       "      <td>83.298262</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   DecisionTreeClassifier  LinearRegression\n",
       "Training Accuracy              100.000000         83.200169\n",
       "Test Accuracy                   67.682762         83.298262"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = [models_accuracy,bogo_test_accuracy]\n",
    "results_df = pd.DataFrame(results, columns = model_names,index=['Training Accuracy', 'Test Accuracy'])\n",
    "results_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "suggests that the resulting DecisionTreeClassifier model has a training data accuracy of 100 and test accuracy of 67. i think that the DecisionTreeClassifier model I think did not overfit the training data.To avoid overfitting I will choose LinearRegression since it got better results 83% on training and 83.3% on testing datasets. LinearRegression is better used here since we have few binomial outcomes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# improve the Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score: 0.6771\n",
      "Final accuracy score: 0.7189\n",
      "Best params: {'max_depth': 13, 'min_samples_split': 140}\n"
     ]
    }
   ],
   "source": [
    "# Referance https://scikit-learn.org/stable/modules/grid_search.html\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "#The DecisionTreeClassifier()\n",
    "Dectree = DecisionTreeClassifier()\n",
    "\n",
    "#The parameters\n",
    "pm =  {'min_samples_split' : range(20,400,40),'max_depth': range(3,40,5)}\n",
    "\n",
    "#The GridSearchCV\n",
    "gobj = GridSearchCV(Dectree, pm)\n",
    "gfit = gobj.fit(X_train, y_train)\n",
    "grid = GridSearchCV(estimator=Dectree, param_grid=pm,cv=5)\n",
    "grid_result = grid.fit(X_train, y_train)\n",
    "\n",
    "# The Estimatr\n",
    "bclf = gfit.best_estimator_\n",
    "\n",
    "# The predict\n",
    "pred = (Dectree.fit(X_train, y_train)).predict(X_test)\n",
    "bpred = bclf.predict(X_test)\n",
    "\n",
    "# Accuracy score on testing data and Final accuracy score on the testing data\n",
    "print(\"Accuracy score: {:.4f}\".format(accuracy_score(y_test, pred)))\n",
    "print(\"Final accuracy score: {:.4f}\".format(accuracy_score(y_test, bpred)))\n",
    "print(f'Best params: {grid_result.best_params_}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "i used GridSearchCV to improve the DecisionTreeClassifier model and I get 71% increased by 4.9% and I think it doesn't need further improvements and LinearRegression is 83% it is better than DecisionTreeClassifier I will choose LinearRegression and Best params: {'max_depth': 13, 'min_samples_split': 140}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "\n",
    "The goal of this project is to predict how the customer will interact with the offers that Starbuck will present/send. Firstly I took the provided data that requires some cleaning activity, then I did the needed changes to analyze that data that required to be applied before starting the data exploring activity. Finally, I used two models first one DecisionTreeClassifier I got 67% and the second one I use the LinearRegression I got 83% accuracy rate. I used GridSearchCV to improve the DecisionTreeClassifier model and I get 71% increased by 4.9% and I think it doesn't need further improvements. As a result of modeling the data, we found the females are more excited about the offer, and Starbuck should enhance their offers based on the provided result. Moreover, Starbuck can use the model to enhance their offers periodically after each offer to know the real benefits to aim their offer to the correct audience"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# challenge\n",
    "The challenging part is what the problem I will solve and how to improve the model, I very enjoy working on this project.I will build many models to help my company"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Improvements\n",
    "I think I arrive at a good point. To make the result better, I will try to improve the data gathering and fix nulls values. I will also try to get more data about customers and products. I think if we have more attributes it is will be perfect "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
